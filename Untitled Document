Now, I want to modify the code, I added my own data and it's named "analyzed_data.csv", I want to show the heatmap based on the following condition whenever I click on a country from my data: "data_copy.groupby('Country')['Number of reported cases of cholera'].sum()"

Rewrite the code and rank the degrees of the heatmap based on the following condition: "data_copy.groupby('Country')['Number of reported cases of cholera'].sum()"

change the colors of the heatmap, where the dark red represents the most cholera cases, and light orange is the least

Now add a dropdown list containing all the countries from the column "Country" related to the heatmap so the user can choose whether to click on the map to show the reported cases of cholera or to choose the country from the dropdown list

Now, I want to edit to make sure the selected country from the dropdown list or clicked from the map, is the same on all the objects like: "Total reported cases of cholera ..." and "Geographic Heatmap - Cholera Cases: ()"

Also, make sure when I click on a country from the map to change the country from the dropdown list.

Now I want to add two more figures, the first one should be represented in cards to show the following: " Average number of reported cases over years" which could be counted using the following: " analyzed_data.groupby('Country')['Number of reported cases of cholera'].mean().astype(int)", the second card should contain the following: " Average number of reported deaths from cholera" using the following code: " analyzed_data.groupby('Country')['Number of reported deaths from cholera'].mean()", and the last card should contain: " Average number of cholera case fatality rate" which represented using the following code: "analyzed_data.groupby('Country')['Cholera case fatality rate'].mean()". The second figure should contain a line chart to represent the "Number of reported cases of cholera" and "Number of reported deaths from cholera" over years, the years in the column "Year". 

Three card figures showing the average number of reported cases, deaths, and case fatality rate for the selected country.
A line chart showing the trend of reported cases and deaths over the years for the selected country.

Three card figures showing the average number of reported cases, deaths, and case fatality rate for the selected country. A line chart showing the trend of reported cases and deaths over the years for the selected country. Using the following conditions for the card figures: : " Average number of reported cases over years" which could be counted using the following: " analyzed_data.groupby('Country')['Number of reported cases of cholera'].mean().astype(int)", the second card should contain the following: " Average number of reported deaths from cholera" using the following code: " analyzed_data.groupby('Country')['Number of reported deaths from cholera'].mean()", and the last card should contain: " Average number of cholera case fatality rate" which represented using the following code: "analyzed_data.groupby('Country')['Cholera case fatality rate'].mean()". 









Create a Dash interactive page using the following data which named "analyzed_data.csv".

The web page should contain a heatmap using the column “Country” from “analyzed_data.csv”, based on the following condition: "analyzed_data.groupby('Country')['Number of reported cases of cholera'].sum()"

rank the degrees of the heatmap based on the following condition: "analyzed_data groupby('Country')['Number of reported cases of cholera'].sum()"

change the colors of the heatmap, where the dark red represents the most cholera cases, and light orange is the least.


Now add a dropdown list containing all the countries from the column "Country" related to the heatmap so the user can choose whether to click on the map to show the reported cases of cholera or to choose the country from the dropdown list. 

make sure the selected country from the dropdown list or clicked from the map, is the same on all the objects like: "Total reported cases of cholera ..." and "Geographic Heatmap - Cholera Cases: ()"

Also, when I click on a country from the map to change the country from the dropdown list.



Now I want to add two more figures, the first one should be represented in cards to show the following: " Average number of reported cases over years" which could be counted using the following: " analyzed_data.groupby('Country')['Number of reported cases of cholera'].mean().astype(int)", the second card should contain the following: " Average number of reported deaths from cholera" using the following code: " analyzed_data.groupby('Country')['Number of reported deaths from cholera'].mean()", and the last card should contain: " Average number of cholera case fatality rate" which represented using the following code: "analyzed_data.groupby('Country')['Cholera case fatality rate'].mean()". 

The second figure should contain a line chart to represent the "Number of reported cases of cholera" and "Number of reported deaths from cholera" over years, the years in the column "Year". 


In conclusion:
A heatmap with the sum of number of reported cases of cholera.

dropdown list containing all the countries from the column "Country" related to the heatmap.

Three card figures showing the average number of reported cases, deaths, and case fatality rate for the selected country.
A line chart showing the trend of reported cases and deaths over the years for the selected country.


import pandas as pd
import dash
from dash import dcc, html
from dash.dependencies import Input, Output, State
import plotly.express as px
import plotly.graph_objs as go

# Step 1: Load your data
analyzed_data = pd.read_csv('analyzed_data.csv')

# Step 2: Create Dash app
app = dash.Dash(__name__)

# Step 3: Define the layout
app.layout = html.Div([
    html.H1("Cholera Dashboard", style={'text-align': 'center'}),
    
    html.Div([
        dcc.Graph(
            id='geographic-heatmap',
            config={'scrollZoom': False},
            style={'height': '70vh', 'width': '100%'},  # Set initial size of the heatmap
        ),
    ], style={'text-align': 'center'}),
    
    html.Div([
        dcc.Dropdown(
            id='country-dropdown',
            options=[{'label': country, 'value': country} for country in analyzed_data['Country'].unique()],
            value=analyzed_data['Country'].iloc[0],  # Set default value to the first country
            style={'width': '50%', 'margin': 'auto'},
        ),
        
        # Hidden div to store selected country
        html.Div(id='selected-country-hidden', style={'display': 'none'}),
        
        html.Div(id='selected-country', style={'margin-top': '10px'}),
    ], style={'text-align': 'center', 'margin-top': '20px'}),
    
    html.Div([
        html.Div([
            dcc.Graph(id='avg-reported-cases-card'),
        ], style={'display': 'inline-block', 'width': '30%', 'border': '1px solid #ddd', 'padding': '10px', 'border-radius': '5px'}),
        
        html.Div([
            dcc.Graph(id='avg-reported-deaths-card'),
        ], style={'display': 'inline-block', 'width': '30%', 'margin-left': '20px', 'border': '1px solid #ddd', 'padding': '10px', 'border-radius': '5px'}),
        
        html.Div([
            dcc.Graph(id='avg-case-fatality-rate-card'),
        ], style={'display': 'inline-block', 'width': '30%', 'margin-left': '20px', 'border': '1px solid #ddd', 'padding': '10px', 'border-radius': '5px'}),
    ], id='cards-container', style={'margin-top': '20px', 'text-align': 'center'}),
    
    html.Div([
        dcc.Graph(
            id='line-chart',
            config={'scrollZoom': False},
        ),
    ], style={'margin-top': '20px'}),
])

# Step 4: Define callbacks
@app.callback(
    [Output('selected-country-hidden', 'children'),
     Output('selected-country', 'children'),
     Output('geographic-heatmap', 'figure'),
     Output('country-dropdown', 'value'),
     Output('cards-container', 'style'),
     Output('line-chart', 'style')],
    [Input('geographic-heatmap', 'clickData'),
     Input('country-dropdown', 'value')],
    State('geographic-heatmap', 'figure')
)
def display_selected_country(clickData, selected_country_dropdown, current_figure):
    ctx = dash.callback_context
    triggered_id = ctx.triggered_id
    if triggered_id and 'geographic-heatmap' in triggered_id:
        # Clicked on the map
        selected_country = clickData['points'][0]['location']
    elif selected_country_dropdown:
        # Selected from the dropdown
        selected_country = selected_country_dropdown
    else:
        return None, "Click on a country or choose from the dropdown to display results.", current_figure, analyzed_data['Country'].iloc[0], {'display': 'none'}, {'display': 'none'}
    
    # Calculate the sum of reported cases of cholera for the selected country
    result_value = analyzed_data[analyzed_data['Country'] == selected_country]['Number of reported cases of cholera'].sum()
    
    result = f"Total reported cases of cholera in {selected_country}: {result_value}"
    
    # Highlight the selected country without zooming
    highlighted_figure = px.choropleth(
        analyzed_data,
        locations='Country',
        locationmode='country names',
        color='Number of reported cases of cholera',
        color_continuous_scale="reds",
        title=f'Geographic Heatmap - Cholera Cases (Selected: {selected_country})',
        labels={'Number of reported cases of cholera': 'Number of reported cases of cholera'},
    )
    
    # Set the selected country color to stand out
    highlighted_figure.update_traces(marker_line_color='black', marker_line_width=2, selector=dict(name=selected_country))
    
    return selected_country, result, highlighted_figure, selected_country, {'margin-top': '20px', 'text-align': 'center'}, {'margin-top': '20px', 'text-align': 'center'}

@app.callback(
    Output('avg-reported-cases-card', 'figure'),
    [Input('selected-country-hidden', 'children')]
)
 
def update_avg_reported_cases_card(selected_country):
    # Calculate average reported cases over years
    avg_reported_cases = analyzed_data.groupby('Country')['Number of reported cases of cholera'].mean().astype(int)
    
    # Create card figure
    fig = go.Figure()
    fig.add_trace(go.Indicator(
        mode="number+delta",
        value=avg_reported_cases[selected_country],
        title="Average Reported Cases",
        delta={'reference': avg_reported_cases.mean(), 'position': "top"},
    ))
    
    fig.update_layout(title=f'Average Reported Cases in {selected_country}')
    
    return fig

@app.callback(
    Output('avg-reported-deaths-card', 'figure'),
    [Input('selected-country-hidden', 'children')]
)
def update_avg_reported_deaths_card(selected_country):
    # Calculate average reported deaths over years
    avg_reported_deaths = analyzed_data.groupby('Country')['Number of reported deaths from cholera'].mean()
    
    # Create card figure
    fig = go.Figure()
    fig.add_trace(go.Indicator(
        mode="number",
        value=avg_reported_deaths[selected_country],
        title="Average Reported Deaths",
    ))
    
    fig.update_layout(title=f'Average Reported Deaths in {selected_country}')
    
    return fig

@app.callback(
    Output('avg-case-fatality-rate-card', 'figure'),
    [Input('selected-country-hidden', 'children')]
)
def update_avg_case_fatality_rate_card(selected_country):
    # Calculate average case fatality rate over years
    avg_case_fatality_rate = analyzed_data.groupby('Country')['Cholera case fatality rate'].mean()
    
    # Create card figure
    fig = go.Figure()
    fig.add_trace(go.Indicator(
        mode="number",
        value=avg_case_fatality_rate[selected_country],
        title="Average Case Fatality Rate",
    ))
    
    fig.update_layout(title=f'Average Case Fatality Rate in {selected_country}')
    
    return fig

@app.callback(
    Output('line-chart', 'figure'),
    [Input('selected-country-hidden', 'children')]
)
def update_line_chart(selected_country):
    # Filter data for the selected country
    country_data = analyzed_data[analyzed_data['Country'] == selected_country]
    
    # Create line chart figure
    fig = px.line(country_data, x='Year', y=['Number of reported cases of cholera', 'Number of reported deaths from cholera'],
                  labels={'value': 'Count', 'variable': 'Category'},
                  title=f'Reported Cases and Deaths Over Years ({selected_country})')
    
    return fig

# Step 5: Rank the degrees of the heatmap based on the specified condition
data_sorted = analyzed_data.groupby('Country')['Number of reported cases of cholera'].sum().reset_index()
data_sorted = data_sorted.sort_values(by='Number of reported cases of cholera', ascending=False)

# Step 6: Create an initial geographic heatmap
initial_figure = px.choropleth(
    data_sorted,
    locations='Country',
    locationmode='country names',
    color='Number of reported cases of cholera',
    color_continuous_scale="reds",
    title='Geographic Heatmap - Cholera Cases (Ranked)',
    labels={'Number of reported cases of cholera': 'Number of reported cases of cholera'},
)

# Step 7: Update the layout with the initial geographic heatmap
app.layout['geographic-heatmap'].figure = initial_figure

# Step 8: Run the app
if __name__ == '__main__':
    app.run_server(debug=True)

The last code:
    
import pandas as pd
import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.graph_objs as go
import plotly.express as px

# Step 1: Load your data
data_copy = pd.read_csv('analyzed_data.csv')

# Step 2: Create Dash app
app = dash.Dash(__name__)

# Step 3: Define the layout
app.layout = html.Div([
    dcc.Graph(
        id='geographic-heatmap',
        style={'height': '70vh', 'width': '100%', 'text-align': 'center'},
        config={'scrollZoom': False},
    ),
    
    
    html.Div(id='selected-country'),
    
    html.Div([
        html.Div([
            dcc.Graph(id='avg-reported-cases-card'),
        ], style={'display': 'inline-block', 'width': '30%', 'border': '1px solid #ddd', 'padding': '10px', 'border-radius': '5px'}),
        
        html.Div([
            dcc.Graph(id='avg-reported-deaths-card'),
        ], style={'display': 'inline-block', 'width': '30%', 'margin-left': '20px', 'border': '1px solid #ddd', 'padding': '10px', 'border-radius': '5px'}),
        
        html.Div([
            dcc.Graph(id='avg-case-fatality-rate-card'),
        ], style={'display': 'inline-block', 'width': '30%', 'margin-left': '20px', 'border': '1px solid #ddd', 'padding': '10px', 'border-radius': '5px'}),
    ], id='cards-container', style={'margin-top': '20px', 'text-align': 'center'}),

    dcc.Graph(id='line-chart', style={'width': '100%'}),
])

# Step 4: Define callbacks
@app.callback(
    Output('selected-country', 'children'),
    [Input('geographic-heatmap', 'clickData')]
)
def display_selected_country(clickData):
    if clickData is None:
        return "Click on a country from the map to display results."
    
    selected_country = clickData['points'][0]['location']
    
    # Calculate the sum of reported cases of cholera for the selected country
    result_value = data_copy[data_copy['Country'] == selected_country]['Number of reported cases of cholera'].sum()
    
    result = f"Total reported cases of cholera in {selected_country}: {result_value}"
    
    return result

@app.callback(
    Output('avg-reported-cases-card', 'figure'),
    Output('avg-reported-deaths-card', 'figure'),
    Output('avg-case-fatality-rate-card', 'figure'),
    Output('line-chart', 'figure'),
    [Input('geographic-heatmap', 'clickData')]
)

def update_charts(clickData):
    if clickData is None:
        return {}, {}, {}, {}

    selected_country = clickData['points'][0]['location']
    country_data = data_copy[data_copy['Country'] == selected_country]

    avg_reported_cases = country_data['Number of reported cases of cholera'].mean().astype(int)
    avg_reported_deaths = country_data['Number of reported deaths from cholera'].mean().astype(int)
    avg_case_fatality_rate = country_data['Cholera case fatality rate'].mean()

    fig_avg_cases = go.Figure(go.Indicator(
        mode="number+delta",
        value=avg_reported_cases,
        title="Average Reported Cases",
        delta={'reference': avg_reported_cases.mean(), 'position': "top"},
    ))
    
    
    
    fig_avg_deaths = go.Figure(go.Indicator(
        mode="number",
        value=avg_reported_deaths,
        title="Average Reported Deaths",
    ))
    fig_avg_case_fatality_rate = go.Figure(go.Indicator(
        mode="number",
        value=avg_case_fatality_rate,
        title="Average Case Fatality Rate",
    ))

    fig_line_chart = px.line(
        country_data,
        x='Year',
        y=['Number of reported cases of cholera', 'Number of reported deaths from cholera'],
        labels={'value': 'Count', 'variable': 'Category'},
        title=f'Reported Cases and Deaths Over Years ({selected_country})'
    )

    return fig_avg_cases, fig_avg_deaths, fig_avg_case_fatality_rate, fig_line_chart

# Step 5: Rank the degrees of the heatmap based on the specified condition
data_sorted = data_copy.groupby('Country')['Number of reported cases of cholera'].sum().reset_index()
data_sorted = data_sorted.sort_values(by='Number of reported cases of cholera', ascending=False)

# Step 6: Create a geographic heatmap with custom colors
fig = px.choropleth(
    data_sorted,
    locations='Country',
    locationmode='country names',
    color='Number of reported cases of cholera',
    color_continuous_scale="reds",  # You can choose other color scales too
    title='Geographic Heatmap - Cholera Cases (Ranked)',
    labels={'Number of reported cases of cholera': 'Number of reported cases of cholera'},
)

# Step 7: Update the layout with the geographic heatmap
app.layout['geographic-heatmap'].figure = fig

# Step 8: Run the app
if __name__ == '__main__':
    app.run_server(debug=True)
